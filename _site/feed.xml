<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2020-11-01T23:21:04-05:00</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Ethan Smith</title><subtitle>This blog is an outlet for my tech related thoughts and dreams.</subtitle><entry><title type="html">Spam Email and Custom Domain</title><link href="http://localhost:4000/blog/spam-emails-and-custom-domain" rel="alternate" type="text/html" title="Spam Email and Custom Domain" /><published>2020-11-01T00:00:00-04:00</published><updated>2020-11-01T00:00:00-04:00</updated><id>http://localhost:4000/blog/Spam-emails-and-custom-domain</id><content type="html" xml:base="http://localhost:4000/blog/spam-emails-and-custom-domain">&lt;p&gt;I was getting way too many spam emails (both at work and personal email) that I got fed up. Inspired by the age old method of using a companies name as your middle name when signing up for mailing lists, coupons, new accounts, etc. and wanting to &lt;a href=&quot;https://www.reddit.com/r/degoogle&quot;&gt;de-google&lt;/a&gt; as much as possible (I still use Android), I decided to use a custom domain and email forwarding to track which companies sell my email and to whom.&lt;/p&gt;

&lt;p&gt;One of the first uses I had for this was when I started looking into graduate schools and I signed up for information from Syracuse. A few months later and I received an email to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syracuse@ethansmith.io&lt;/code&gt; from UC Berkley. Right away I could see my idea paying off. Since then, I have been slowly combing through the list of sites I have accounts with and have changed the email on the accounts to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;websitename@ethansmith.io&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-see-this-as-having-multiple-benefits&quot;&gt;I see this as having multiple benefits:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;My email accounts on sites are now unique&lt;/strong&gt;&lt;br /&gt;
If there is a data breach on Netflix, for example, my email is still safe from a brute force attack on Hulu. Coupled with a password manager like bitwarden, my accounts are all unique and have long, secure pass phrases.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I don’t have to use a “spam email” and remember which site uses which email address&lt;/strong&gt;&lt;br /&gt;
Prior to using this method, I would use my old email address from middle school for sites that I did not care about or that I did not want to have my primary email. This led to me not remembering which email I was using for a specific site and caused me to have to go through password recovery processes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;My online accounts are now email provider agnostic&lt;/strong&gt;&lt;br /&gt;
If I want to stop using gmail and switch over to a more privacy focused email provider such as Protonmail, I do not have to update my email information on multiple accounts or create a forwading rule in Gmail to my new email (thus defeating the purpose of switching away from Gmail altogether).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I can use a deny or allow list on incoming emails to block any offending emails&lt;/strong&gt;&lt;br /&gt;
If one site starts selling my data to everyone and their cousins, I can simply block that email. Alternatively, if a bad actor decides to sign me up for multiple different spam sites using a few different alias, I can simply create an allow list of my known aliases in my email client or set up individual aliases for each website (up to 100 for free on Name Cheap and Google Domains)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;steps-to-replicate-with-google-domains-ironic-i-know&quot;&gt;Steps to replicate with Google Domains (Ironic, I know)&lt;/h2&gt;
&lt;p&gt;I use google domains, but the steps are similar for other domain hosts&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Navigate to your domain settings and select email from the left hand navigation
&lt;img src=&quot;/assets/Google Domains - Email.png&quot; alt=&quot;Google Domains Email&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Click add alias&lt;/li&gt;
  &lt;li&gt;For the alias, put in an asterisk and for forwarding address, put in the email you want to forward to.
&lt;img src=&quot;/assets/Add email alias.png&quot; alt=&quot;Add email alias&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;namecheap-is-even-easier&quot;&gt;NameCheap is even easier&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Choose manage next to the domain name you want to set up forwarding on.&lt;/li&gt;
  &lt;li&gt;Scroll down to “Redirect Email” and choose “Add Catch-All”
&lt;img src=&quot;/assets/NameCheap - Email.png&quot; alt=&quot;Add Catch-All Email Forward&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="email" /><category term="forwarding" /><category term="custom" /><category term="domain" /><summary type="html">I was getting way too many spam emails (both at work and personal email) that I got fed up. Inspired by the age old method of using a companies name as your middle name when signing up for mailing lists, coupons, new accounts, etc. and wanting to de-google as much as possible (I still use Android), I decided to use a custom domain and email forwarding to track which companies sell my email and to whom.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/blog/welcome-to-jekyll" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-10-28T20:11:10-04:00</published><updated>2020-10-28T20:11:10-04:00</updated><id>http://localhost:4000/blog/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/blog/welcome-to-jekyll">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>